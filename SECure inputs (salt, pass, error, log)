import threading
import time
import requests
import logging
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from requests.exceptions import RequestException
from getpass import getpass
import os

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Define your KPIs
kpis = {
    'sales': 'https://api.example.com/sales',
    'users': 'https://api.example.com/users',
    'engagement': 'https://api.example.com/engagement',
}

# Generate a key for encryption
password_provided = getpass("Enter encryption key: ") # This is a secure method of getting the key
password = password_provided.encode() 
salt = os.urandom(16)  # This is a secure method of getting a salt
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA256(),
    length=32,
    salt=salt,
    iterations=100000,
)
key = base64.urlsafe_b64encode(kdf.derive(password))
cipher_suite = Fernet(key)

def update_kpi(kpi, url):
    while True:
        try:
            # Fetch the KPI data
            response = requests.get(url)
            response.raise_for_status()  # Raise an exception if the request failed
            data = response.json()

            # Encrypt the data
            encrypted_data = cipher_suite.encrypt(str(data).encode())

            # Update the KPI
            kpis[kpi] = encrypted_data

            # Log the update
            logging.info(f'Updated {kpi} at {time.ctime()}')

        except RequestException as e:
            logging.error(f'Failed to update {kpi}: {e}')

        finally:
            # Wait for a while before updating again
            time.sleep(60)

# Create and start a thread for each KPI
for kpi, url in kpis.items():
    thread = threading.Thread(target=update_kpi, args=(kpi, url))
    thread.start()
